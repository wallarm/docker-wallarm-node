server {
        listen 80 default_server;
        #listen 443 ssl;

        server_name localhost;

        real_ip_header X-Real-IP;
        set_real_ip_from  0.0.0.0/0;

        #ssl_certificate cert.pem;
        #ssl_certificate_key cert.key;

        root /usr/share/nginx/html;

        index index.html index.htm;

        #wallarm_fallback off;  # It doesn't work for docker node, we should use `-e WALLARM_FALLBACK=false` there
        wallarm_mode block;
        # wallarm_application 1;

        location / { # Example of proxying to a local backend
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /wallarm-mode/monitoring {
                wallarm_mode monitoring;
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Endpoint for `test_api_abuse_prevention.py` (and any other test, that uses non-default APP_ID)
        location /wallarm-application/ {
                wallarm_application $http_custom_id;
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api-discovery-test {
                wallarm_application $http_custom_id;
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /blocking-by-tor-test {
                wallarm_application $http_custom_id;
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
}
